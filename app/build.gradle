buildscript {
    ext.anko_version = '0.10.2'
    ext.junit_platform_ver = '1.0.0-M2'
    ext.spek_version = '1.0.89'
    ext.t4j_version = '4.0.6'
    ext.dagger_version = '2.10'
    ext.support_lib_ver = '26.1.0'
    ext.kt_coroutines = '0.19.2'
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    buildToolsVersion "$android_build_tool_ver"

    signingConfigs {
        release {
            storeFile file('../release.jks')
            storePassword ""
            keyAlias "AndroidReleaseKey"
            keyPassword ""
        }

        debug {
            storeFile file('../debug.jks')
            storePassword "android"
            keyAlias "AndroidDebugKey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "net.ketc.numeri3"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 0
        versionName "beta-0.1.3"
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
}

kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //android-support
    compile "com.android.support:appcompat-v7:$support_lib_ver"
    compile "com.android.support:design:$support_lib_ver"
    compile "com.android.support:recyclerview-v7:$support_lib_ver"
    compile 'com.android.support.constraint:constraint-layout:1.1.0-beta3'

    //kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kt_coroutines"

    //anko
    compile "org.jetbrains.anko:anko-sdk23:$anko_version"
    compile "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
    compile "org.jetbrains.anko:anko-design:$anko_version"
    compile "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"

    //PhotoView
    compile 'com.github.chrisbanes:PhotoView:2.0.0'

    //rx
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxkotlin:2.0.2'

    //twitter4j
    compile "org.twitter4j:twitter4j-core:$t4j_version"
    compile "org.twitter4j:twitter4j-stream:$t4j_version"

    //dagger
    compile "com.google.dagger:dagger:$dagger_version"
    compile "com.google.dagger:dagger-android:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    provided 'org.glassfish:javax.annotation:10.0-b28'

    //ormLite
    compile 'com.j256.ormlite:ormlite-core:5.0'
    compile 'com.j256.ormlite:ormlite-android:5.0'

    //test
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1.4'
    testCompile 'org.mockito:mockito-core:2.3.5'
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"

    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
}

configurations.all {
    resolutionStrategy {
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    def packageRelease = ":app:packageRelease"
    if (taskGraph.hasTask(packageRelease)) {
        taskGraph.allTasks.find { it.name == "packageRelease" }.doFirst {
            def properties = new Properties()
            def stream = new FileInputStream(rootDir.path + "/signing.properties")
            properties.load(stream)
            stream.close()
            def storePasswordValue = properties.getProperty("storePassword")
            def keyPasswordValue = properties.getProperty("keyPassword")
            android.signingConfigs.release.storePassword = storePasswordValue
            android.signingConfigs.release.keyPassword = keyPasswordValue
        }
    }
}